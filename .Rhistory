plot = TRUE)
y = c(994, 997, 999, 1003, 994, 998, 1001, 998, 996, 1002, 1004, 995, 994, 995, 998, 1001, 995, 1006, 997, 998)
mu = seq(991,1010,by=1)
mu.prior = rep(0.05, length(mu))
sigma.x = sd(y)^2/length(y)
normdp(y, 3, mu, mu.prior,
plot = TRUE)
y = c(994, 997, 999, 1003, 994, 998, 1001, 998, 996, 1002, 1004, 995, 994, 995, 998, 1001, 995, 1006, 997, 998)
mu = seq(991,1010,by=1)
mu.prior = rep(0.05, length(mu))
sigma.x = sd(y)^2/length(y)
result = normdp(y, 3, mu, mu.prior,
plot = TRUE)
cat('The posterior distribution is', result$posterior)
result$posterior
result
result$cdf
n
Fmu = cdf(results)
Fmu(1000)
pnorm(1000, mean(results), sd(results))
mean(results)
sd(results)
Fmu(999)
?normnp
y = c(38.7, 40.4, 37.2, 36.6, 35.9, 34.7, 37.6, 35.1, 37.5, 35.6)
mean(y)
?normnp
$ = x
h$1 = x
x = c(38.7, 40.4, 37.2, 36.6, 35.9, 34.7, 37.6, 35.1, 37.5, 35.6)
m.x = 30
s.x = 10
sigma.x = sd(x)
normnp(x, m.x, s.x, sigma.x)
Fmu = cdf(result)
prob = Fmu(35)
?normnp
sd(x)
x = c(3.07, 7.51, 5.95, 6.83, 8.80, 4.19, 7.44, 7.06, 9.67, 6.89)
mean(x)
mean(x)
mu = seq(4, 9.5, by=0.5)
mu
?normdp
x = c(3.07, 7.51, 5.95, 6.83, 8.80, 4.19, 7.44, 7.06, 9.67, 6.89)
mean(x)
mu = seq(4, 9.5, 0.5)
mu.prior = rep(0.08333333, length(mu))
normdp(x, sigma.x=x, mu, mu.prior )
x = c(3.07, 7.51, 5.95, 6.83, 8.80, 4.19, 7.44, 7.06, 9.67, 6.89)
mean(x)
mu = seq(4, 9.5, 0.5)
mu.prior = rep(0.08333333, length(mu))
normdp(x, sigma.x=2, mu, mu.prior )
x = c(3.07, 7.51, 5.95, 6.83, 8.80, 4.19, 7.44, 7.06, 9.67, 6.89)
mu = seq(4, 9.5, 0.5)
mu.prior = rep(0.08333333, length(mu))
result = normdp(x, sigma.x=2, mu, mu.prior )
result$posterior
lenght(result$posterior)
length(result$posterior)
length(mu)
result$posterior
x = c(38.7, 40.4, 37.2, 36.6, 35.9, 34.7, 37.6, 35.1, 37.5, 35.6)
mean(x)
36.86 + 1.96*0.94
36.86 =1.96*0.94
36.86 -1.96*0.94
pnorm(-0.053/0.04, lower.tail = F)
-0.053/0.04
?pnorm
pnorm(-0.053/0.04, lower.tail = F)
pnorm(-0.053/0.04, lower.tail = F)
?normdp
?normno
?normnp
normnp(y, m.x = 75, s.x = 10, sigma.x=sigma)
y = c(79.9, 80, 78.9, 75.6, 80.5, 82.5, 80.1, 81.6, 76.7)
sigma=2
normnp(y, m.x = 75, s.x = 10, sigma.x=sigma)
knitr::opts_chunk$set(echo = TRUE)
library(Bolstad)
post=normnp(y, m.x = 75, s.x = 10, sigma.x=sigma)
cdf(post)
post=normnp(y, m.x = 75, s.x = 10, sigma.x=sigma)
?rnorn
?rnorm
qnorm(c(0.025, 0.975), mean = post$mean, sd = post$sd, lower.tail = TRUE)
pnorm(80, mean = post$mean, sd = post$sd, lower.tail = F)
# (b)
conf = qnorm(c(0.025, 0.975), mean = post$mean, sd = post$sd, lower.tail = TRUE)
conf
y = c(79.9, 80, 78.9, 75.6, 80.5, 82.5, 80.1, 81.6, 76.7)
sigma=2
# (a)
post = normnp(y, m.x = 75, s.x = 10, sigma.x=sigma)
# (b)
conf = qnorm(c(0.025, 0.975), mean = post$mean, sd = post$sd, lower.tail = TRUE)
# (c)
pval = pnorm(80, mean = post$mean, sd = post$sd, lower.tail = F)
post$mean
y = c(79.9, 80, 78.9, 78.5,  75.6, 80.5, 82.5, 80.1, 81.6, 76.7)
sigma=2
# (a)
post = normnp(y, m.x = 75, s.x = 10, sigma.x=sigma)
# (b)
conf = qnorm(c(0.025, 0.975), mean = post$mean, sd = post$sd, lower.tail = TRUE)
# (c)
pval = pnorm(80, mean = post$mean, sd = post$sd, lower.tail = F)
conf
pval
f1 = c(16.2, 12.7, 14.8, ,15.6, 14.7, 13.8, 16.7, 13.7, 16.8, 14.7)
conf =qnorm(c(0.025, 0.975), mean=post_d_mean, sd=post_d_sigma)
f1 = c(16.2, 12.7, 14.8,15.6, 14.7, 13.8, 16.7, 13.7, 16.8, 14.7)
f2 = c(16.1, 16.3, 14.0, 16.2, 15.2, 16.5, 14.4, 16.3, 16.9, 13.7)
# (a)
m.x = 15
s.x = 4
sigma.x = 1.2
post1 = normnp(f1, m.x=m.x, s.x=s.x, sigma.x=sigma.x)
post2 = normnp(f2, m.x=m.x, s.x=s.x, sigma.x=sigma.x)
post_d_mean = post1$mean - post2$mean
post_d_sigma = sqrt(post1$sd^2 + post2$sd^2)
conf =qnorm(c(0.025, 0.975), mean=post_d_mean, sd=post_d_sigma)
pval = pnorm(0, mean=post_d_mean, sd=post_d_sigma, lower.tail = F)
pval
pval = pnorm(0, mean=post_d_mean, sd=post_d_sigma, lower.tail = F)
pval =
pnorm(0, mean=post_d_mean, sd=post_d_sigma, lower.tail = T)
conf
?ttest
t.test(f1, f2, alternative = "two.sided")
post1 = binobp(x=171, n=314)
post1 = binobp(x=137, n=219)
post1 = binobp(x=171, n=314)
post2 = binobp(x=137, n=219)
?qbinom
?binombop
?binombp
?binobp
?qbinom
?qbeta
?quantile.Bolstad
post1 - post2
post_d_mean
post_d_sd
post_d_sd = sqrt(post1$sd^2 + post2$sd^2)
post_d_sd
1-0.99
0.5(1-0.99)
0.5*(1-0.99)
post_d_sd
conf = qnorm(c(0.005, 0.995), mean=post_d_mean, sd=post_d_sd)
conf
y = c(12, 24, 48, 84, 121, 192, 240, 276, 300)
a = c(24, 48, 84, 121, 192, 240, 276, 300, 312)
a-y
tfc = rep(50, 10)
tfc
tc = c(100, 150, 200, 250, 300, 350, 400, 450, 500, 550)
tvc = c(100, 150, 200, 250, 300, 350, 400, 450, 500, 550) - 50
tfc = rep(50, 10)
tvc
length(tvc)
labor = seq(1, 10)
labor
atc = tc/labor
atc = tc/labor
avc = tvc/labor
afc = tfc/labor
atc
avc
tvc
avc = tvc/labor
avc
tvc
out = c(12, 24, 48, 84, 121, 192, 240, 276, 300, 312)
atc = tc/out ; atc
avc = tvc/out; avc
afc = tfc/out; afc
25/16
210/4
tp = c(0, 12, 26, 46, 60, 73, 84, 94, 102, 109)
w  = seq(1, 9)
tp
tp0 = c(0, 12, 26, 46, 60, 73, 84, 94, 102)
w  = seq(1, 9)
tp1 = c(12, 26, 46, 60, 73, 84, 94, 102, 109)
tp1 - tp0
1/(tp1 - tp0)
0.54*110
library(Bolstad)
normdp(c(4), sigma.x = 1, mu.prior = rep(1/6, 6), n.mu = 6,
plot = TRUE)
re = normdp(c(4), sigma.x = 1, mu.prior = rep(1/6, 6), n.mu = 6,
plot = TRUE)
re$likelihood
re$posterior
Q= rep(1, 12)
40-4*Q
Q= rep(1:12)
48-4*Q
Q= rep(1:12)
P = 48-4*Q
Q*P
TR[2:]
TR[1:11] - TR[2:12]
TR = Q *P
TR[1:11] - TR[2:12]
TR[2:12] - TR[1:11]
TR[2:12]
TR[2:12] - TR[1:11]
plot(Q[1:11], TR[2:12] - TR[1:11])
Q[1:11]
TR = Q *P
Q[1:11]
TR[2:12] - TR[1:11]
Q= rep(0:12)
Q= rep(0:12)
P = 48-4*Q
Q*P
TR = Q *P
Q[1:11]
TR[1:12] - TR[1:11]
Q= rep(0:12)
P = 48-4*Q
Q*P
TR = Q *P
Q[1:11]
TR = Q *P
Q[1:12]
TR[1:12] - TR[1:11]
TR[1:12] - TR[2:13]
TR = Q *P
Q[1:12]
TR[1:12] - TR[2:13]
TR[2:13] - TR[1:12]
Q[1:12]
TR[2:13] - TR[1:12]
Q[1:13]
TR[2:13] - TR[1:12]
Q[2:13]
TR[2:13] - TR[1:12]
36-44
44/8
48-(4*5.5)
.5*((11-5.5)*(26-4))
.5*(48-26)*5.5
c(29, 20, 11, 10, 9, 8, 7, 6)**2
sum(c(29, 20, 11, 10, 9, 8, 7, 6)**2)
devtools::install_github("mattflor/chorddiag")
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
m
library(chorddiag)
# Create dummy data
m <- matrix(c(5, 0, 0, 1, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
1, 0, 1, 5, 1, 1, 1, 1, 1,
1, 1, 1, 1, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 3),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 4 colors for 4 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
# Build the chord diagram:
p <- chorddiag(m, groupnamePadding = 20)
p
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('lightsalmon4', 'turquoise', 'goldenrod1', 'orangered1', 'orchid1',
'gray27', 'skyblue1', 'darkseagreen2', 'lightpink1')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
groupColors <- c('lightsalmon4', 'turquoise', 'goldenrod1', 'orangered1', 'orchid1',
'gray27', 'skyblue1', 'darkseagreen2', 'lightpink1')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
# A vector of 4 colors for 4 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# A vector of 4 colors for 4 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#FCE3AA', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
# A vector of 4 colors for 4 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20)
p
library(htmlwidgets)
saveWidget(p, file=paste0( getwd(), "/HtmlWidget/chord_interactive.html"))
getwd()
setwd("~/Desktop/eevee")
getwd()
saveWidget(p, file=paste0( getwd(), "/HtmlWidget/chord_interactive.html"))
saveWidget(p, file=paste0( getwd(), "/chord_interactive.html"))
?chorddiag
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 20, showTicks = F)
p
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
library(htmlwidgets)
saveWidget(p, file=paste0( getwd(), "/chord_interactive.html"))
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = T, ticklabelFontsize=0)
p
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = T)
p
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/eevee_chord_interactive.html"))
# Create data
m <- matrix(c(5, 0, 0, 1, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
0, 0, 1, 5, 0, 1, 1, 1, 1,
1, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/eevee_chord_interactive.html"))
source('~/Desktop/xingyaochen.github.io/eevee_chord.R', echo=TRUE)
# Load package
devtools::install_github("mattflor/chorddiag")
library(chorddiag)
library(htmlwidgets)
# Create data
m <- matrix(c(5, 0, 0, 1, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
0, 0, 1, 5, 0, 1, 1, 1, 1,
1, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/eevee_chord_interactive.html"))
m <- matrix(c(5, 0, 0, 1, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
1, 0, 1, 5, 0, 1, 1, 1, 1,
1, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/eevee_chord_interactive.html"))
# Load package
devtools::install_github("mattflor/chorddiag")
library(chorddiag)
library(htmlwidgets)
# Create data
m <- matrix(c(5, 0, 0, 1, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
1, 0, 1, 5, 0, 1, 1, 1, 1,
1, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/index.html"))
getwd()
setwd("~/Desktop/xingyaochen.github.io")
saveWidget(p, file=paste0( getwd(), "/index.html"))
# Load package
devtools::install_github("mattflor/chorddiag")
library(chorddiag)
library(htmlwidgets)
# Create data
m <- matrix(c(5, 0, 0, 1, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
1, 0, 1, 5, 0, 1, 1, 1, 1,
1, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/index.html"))
getwd()
# Create data
m <- matrix(c(5, 0, 0, 0, 1, 0, 0, 0, 3,
0, 5, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
1, 0, 1, 5, 0, 1, 1, 1, 1,
0, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/index.html"))
# Create data
m <- matrix(c(5, 0, 0, 0, 1, 0, 0, 0, 3,
0, 4, 1, 0, 1, 1, 3, 1, 0,
0, 1, 4, 1, 1, 2, 2, 2, 0,
0, 0, 1, 5, 0, 1, 1, 1, 1,
1, 1, 1, 0, 5, 1, 1, 1, 1,
0, 1, 2, 1, 1, 4, 2, 1, 0,
0, 3, 2, 1, 1, 2, 5, 2, 0,
0, 1, 2, 1, 1, 1, 2, 5, 0,
3, 0, 0, 1, 1, 0, 0, 0, 4),
byrow = TRUE,
nrow = 9, ncol = 9)
# A vector of 9 colors for 9 groups
eevees <- c('eevee', 'vaporeon', 'jolteon', 'flareon', 'espeon', 'umbreon', 'glaceon', 'leafeon', 'sylveon')
dimnames(m) <- list(have = eevees,
prefer = eevees)
groupColors <- c('#C59161', '#7CCEE6', '#F8CE6A', '#EA824F', '#DCBFD5', '#4B5A5D',
'#B7E1DD', '#9DD3AF', '#F790AB')
# Build the chord diagram:
p <- chorddiag(m, groupColors = groupColors, groupnamePadding = 10, showTicks = F)
p
saveWidget(p, file=paste0( getwd(), "/index.html"))
